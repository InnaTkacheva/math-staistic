from cmath import sqrt
from poplib import POP3
import numpy as np
from math import factorial
from math import comb as C

# Ex 1
# Даны значения зарплат из выборки выпускников: 
# 100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150. 
# Посчитать среднее арифметическое, среднее квадратичное отклонение, 
# смещенную и несмещенную оценки дисперсий для данной выборки.

x=np.array([100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150])
print(f"среднее арифметическое = {np.mean(x)}")

def mean(x):
    return sum(x)/len(x)
print(mean(x))

print(f"среднее квадратичное отклонение = {np.std(x)}")

def disp (x):
    xm=mean(x)
    sum=0
    for i in x:
        sum += pow(i-xm,2)
    return sum/len(x)

def srkv(x):
    return sqrt(disp(x))

def dispn (x):
    xm=mean(x)
    sum=0
    for i in x:
        sum += pow(i-xm,2)
    return sum/(len(x)-1)

print(disp(x))
print(srkv(x))
print(dispn(x))

# print(f"дисперсия = {np.var(x)}")
# print(f"корень из дисперсии = {np.sqrt(950.11)}")
# print(f"дисперсия несмещенная = {np.var(x, ddof=1)}")
# print(f"корень из дисперсии несмещенной = {np.sqrt(1000.1157894736842)}")



# Ex 2
# В первом ящике находится 8 мячей, из которых 5 - белые. 
# Во втором ящике - 12 мячей, из которых 5 белых. 
# Из первого ящика вытаскивают случайным образом два мяча, из второго - 4. 
# Какова вероятность того, что 3 мяча белые?

# def combinations(n, k):
#         return int(factorial(n) / (factorial(k) * factorial(n-k)))
# p1 = (combinations(5,2)*combinations(7,3)*combinations(5,1))/(combinations(8,2)*combinations(12,4))
# p2 = (combinations(5,3)*combinations(3,2)*combinations(7,1))/(combinations(8,2)*combinations(12,4))
# p3 = (combinations(5,1)*combinations(3,1)*combinations(5,2)*combinations(7,2))/(combinations(8,2)*combinations(12,4))
# print(f"вероятность того, что 3 мяча белые {p1 + p2 + p3}")

# P_3=C(5,2)*C(5,1)*C(7,3)/C(8,2)/C(12,4) + C(5,1)*C(3,1)*C(5,2)*C(7,2)/C(8,2)/C(12,4) + C(3,2)*C(5,3)*C(7,1)/C(8,2)/C(12,4)
# print(P_3)

# $$ P(3)=P1(2)=
# \frac{C^2_5*C^1_5*C^3_7}{C^2_8*C^4_{12}}+\frac{C^1_5*C^1_3*C^2_5*C^2_7}{C^2_8*C^4_{12}}+\frac{C^2_3*C^3_5*C^1_7*}{C^2_8*C^4_{12}}

# Ex 3
# На соревновании по биатлону один из трех спортсменов стреляет и попадает в мишень. 
# Вероятность попадания для первого спортсмена равна 0.9, для второго — 0.8, для третьего — 0.6. 
# Найти вероятность того, что выстрел произведен: 
# P(B|A)=(P(A|B)*P(B))/P(A)
# def P (a, b):
#     pa = 0
#     for i in a:
#         pa += i/len(a)
#     return b/len(a)/pa

# a = [0.9, 0.8, 0.6]
# # a) первым спортсменом 
# print(P(a,0.9))

# # б) вторым спортсменом 
# print(P(a,0.8))

# # в) третьим спортсменом.
# print(P(a,0.6))

# Ex 4
# В университет на факультеты A и B поступило равное количество студентов, 
# а на факультет C студентов поступило столько же, сколько на A и B вместе. 
# Вероятность того, что студент факультета A сдаст первую сессию, равна 0.8. 
# Для студента факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9. 
# Студент сдал первую сессию. Какова вероятность, что он учится: 
# 
# def P (a, c, b):
#     pa = 0
#     for i in range(len(a)):
#         pa += a[i]*c[i]
#     return a[b]*c[b]/pa

# a = [0.8, 0.7 , 0.9]
# c = [0.25, 0.25, 0.5]

# # a). на факультете A 
# print(P(a,c,0))

# # б). на факультете B 
# print(P(a,c,1))

# # в). на факультете C?
# print(P(a,c,2))


# Ex 5
# Устройство состоит из трех деталей. 
# Для первой детали вероятность выйти из строя в первый месяц равна 0.1, 
# для второй - 0.2, для третьей - 0.25. 
# Какова вероятность того, что в первый месяц выйдут из строя: 

# P1 = 0.1
# P2 = 0.2
# P3 = 0.25
# # а). все детали 
# print(P1*P2*P3)
# # б). только две детали 
# print(P1*P2*(1-P3)+P1*P3*(1-P2)+(1-P1)*P2*P3)
# # в). хотя бы одна деталь 
# print(1-(1-P1)*(1-P2)*(1-P3))
# # г). от одной до двух деталей?
# print(P1*(1-P2)*(1-P3)+(1-P1)*P2*(1-P3)+(1-P1)*(1-P2)*P3 + P1*P2*(1-P3)+P1*P3*(1-P2)+(1-P1)*P2*P3)